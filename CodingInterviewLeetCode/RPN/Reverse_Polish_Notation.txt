Reverse Polish notation (RPN), also known as Polish postfix notation or simply postfix notation, is a mathematical notation
in which operators follow their operands, in contrast to Polish notation (PN), in which operators precede their operands.
It does not need any parentheses as long as each operator has a fixed number of operands. 
The description "Polish" refers to the nationality of logician Jan Lukasiewicz, who invented Polish notation in 1924.

In reverse Polish notation, the operators follow their operands;
for instance, to add 3 and 4, one would write 3 4 + rather than 3 + 4.
If there are multiple operations, operators are given immediately after their second operands;
so the expression written 3 - 4 + 5 in conventional notation would be written 3 4 - 5 + in reverse Polish notation:
4 is first subtracted from 3, then 5 is added to it. 
An advantage of reverse Polish notation is that it removes the need for parentheses that are required by infix notation. 
While 3 - 4 × 5 can also be written 3 - (4 × 5), that means something quite different from (3 - 4) × 5.
In reverse Polish notation, the former could be written 3 4 5 × -, which unambiguously means 3 (4 5 ×) - which reduces to 3 20 -;
the latter could be written 3 4 - 5 × (or 5 3 4 - ×, if keeping similar formatting), which unambiguously means (3 4 -) 5 ×.

The following algorithm evaluates postfix expressions using a stack, with the expression processed from left to right:

for each token in the postfix expression:
  if token is an operator:
    operand_2 ? pop from the stack
    operand_1 ? pop from the stack
    result ? evaluate token with operand_1 and operand_2
    push result back onto the stack
  else if token is an operand:
    push token onto the stack
result ? pop from the stack
The following algorithm produces the same results of the previous one, but the expression is processed from right to left:

for each token in the reversed postfix expression:
  if token is an operator:
    push token onto the operator stack
    pending_operand ? False
  else if token is an operand:
    operand ? token
    if pending_operand is True:
      while the operand stack is not empty:
        operand_1 ? pop from the operand stack
        operator ? pop from the operator stack
        operand ? evaluate operator with operand_1 and operand
    push operand onto the operand stack
    pending_operand ? True
result ? pop from the operand stack

Infix notation     ((15 ÷ (7 - (1 + 1))) × 3) - (2 + (1 + 1)) 
postfix notation   15 7 1 1 + - ÷ 3 × 2 1 1 + + -
